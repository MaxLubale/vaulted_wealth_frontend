{"ast":null,"code":"// TransactionForm.js\nimport React,{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const TransactionForm=_ref=>{let{accountId,onTransactionAdded}=_ref;const[amount,setAmount]=useState('');const[description,setDescription]=useState('');const[error,setError]=useState(null);const handleSubmit=async e=>{e.preventDefault();// Check if amount and description are not empty\nif(!amount.trim()||!description.trim()){setError('Please enter both amount and description.');return;}// Prepare transaction data\nconst transactionData={amount:parseFloat(amount),description:description,account_id:accountId// No need to include user_id in the data since it's already part of the route\n// Add other fields as needed\n};try{// Send transaction data to the Flask backend\nconst response=await fetch(\"/\".concat(accountId,\"/transactions\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(transactionData)});if(!response.ok){throw new Error(\"Error: \".concat(response.status,\" - \").concat(response.statusText));}const data=await response.json();console.log('Transaction added successfully:',data);// Notify the parent component that a new transaction has been added\nonTransactionAdded();// Clear form fields and error\nsetAmount('');setDescription('');setError(null);}catch(error){console.error('Error adding transaction:',error);setError('Failed to add transaction. Please try again.');}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Add Transaction\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"amount\",children:\"Amount:$\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"amount\",name:\"amount\",value:amount,onChange:e=>setAmount(e.target.value),required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"description\",children:\"Description:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"description\",name:\"description\",value:description,onChange:e=>setDescription(e.target.value),required:true}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Submit\"})]}),error&&/*#__PURE__*/_jsx(\"p\",{children:error})]});};export default TransactionForm;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","TransactionForm","_ref","accountId","onTransactionAdded","amount","setAmount","description","setDescription","error","setError","handleSubmit","e","preventDefault","trim","transactionData","parseFloat","account_id","response","fetch","concat","method","headers","body","JSON","stringify","ok","Error","status","statusText","data","json","console","log","children","onSubmit","htmlFor","type","id","name","value","onChange","target","required"],"sources":["/home/max/personal-projects/vaulted_wealth_frontend/src/components/TransactionForm.js"],"sourcesContent":["// TransactionForm.js\nimport React, { useState } from 'react';\n\nconst TransactionForm = ({ accountId, onTransactionAdded }) => {\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Check if amount and description are not empty\n    if (!amount.trim() || !description.trim()) {\n      setError('Please enter both amount and description.');\n      return;\n    }\n\n    // Prepare transaction data\n    const transactionData = {\n      amount: parseFloat(amount),\n      description: description,\n      account_id: accountId,\n      // No need to include user_id in the data since it's already part of the route\n      // Add other fields as needed\n    };\n\n    try {\n      // Send transaction data to the Flask backend\n      const response = await fetch(`/${accountId}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(transactionData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('Transaction added successfully:', data);\n\n      // Notify the parent component that a new transaction has been added\n      onTransactionAdded();\n\n      // Clear form fields and error\n      setAmount('');\n      setDescription('');\n      setError(null);\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      setError('Failed to add transaction. Please try again.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Add Transaction</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"amount\">Amount:$</label>\n        <input\n          type=\"number\"\n          id=\"amount\"\n          name=\"amount\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"description\">Description:</label>\n        <input\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          required\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {error && <p>{error}</p>}\n    </div>\n  );\n};\n\nexport default TransactionForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}