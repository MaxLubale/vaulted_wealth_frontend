{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import TransactionForm from'./TransactionForm';import EditAccountNameForm from'./EditAccountNameForm';import DeleteAccount from'./DeleteAccount';import'./UserAccountsPage.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const UserAccountsPage=_ref=>{let{userId}=_ref;const[accounts,setAccounts]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[successMessage,setSuccessMessage]=useState(null);useEffect(()=>{const fetchUserAccounts=async()=>{try{setLoading(true);// Fetch user accounts data from the backend\nconst response=await fetch(\"/user/\".concat(userId,\"/accounts\"),{method:'GET',headers:{'Content-Type':'application/json'}});if(response.ok){const accountsData=await response.json();console.log('User accounts data:',accountsData);// Update the accounts state\nsetAccounts(accountsData.accounts);}else{console.error('Error fetching user accounts. Status:',response.status);const errorMessage=await response.text();console.error('Error message:',errorMessage);setError(\"Error fetching user accounts: \".concat(errorMessage));}}catch(error){console.error('Error fetching user accounts:',error);setError('Something went wrong. Please try again.');}finally{setLoading(false);}};fetchUserAccounts();},[userId]);// Function to handle the edit of an account name\nconst handleEditAccountName=(accountId,newAccountName)=>{// Update the accounts state with the new account name\nsetAccounts(prevAccounts=>prevAccounts.map(account=>account.id===accountId?{...account,account_name:newAccountName}:account));// Set success message\nsetSuccessMessage(\"Account name updated successfully for account \".concat(accountId));// Clear success message after a few seconds\nsetTimeout(()=>{setSuccessMessage(null);},3000);};// Function to delete a transaction\nconst handleDeleteTransaction=(accountId,transactionId)=>{// Implement the logic to delete the transaction here\n// Update the accounts state accordingly\nconsole.log(\"Deleting transaction \".concat(transactionId,\" for account \").concat(accountId));};// Function to delete an account\nconst handleDeleteAccount=accountId=>{// Implement the logic to delete the account here\n// Update the accounts state accordingly\nconsole.log(\"Deleting account \".concat(accountId));// Set success message for account deletion\nsetSuccessMessage(\"Account deleted successfully\");};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"User Accounts\"}),/*#__PURE__*/_jsx(Link,{to:\"/user/\".concat(userId,\"/create-account\"),children:/*#__PURE__*/_jsx(\"button\",{children:\"Create a New Account\"})}),loading&&/*#__PURE__*/_jsx(\"p\",{children:\"Loading user accounts...\"}),error&&/*#__PURE__*/_jsx(\"p\",{children:error}),successMessage&&/*#__PURE__*/_jsx(\"p\",{style:{color:'green'},children:successMessage}),accounts.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Accounts List\"}),accounts.map(account=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Account Name: \",account.name]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Balance: \",account.balance]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Created Date: \",account.created_date]}),/*#__PURE__*/_jsx(DeleteAccount,{accountId:account.id,onDeleteSuccess:deletedAccountId=>{console.log('Account deleted successfully:',deletedAccountId);}}),/*#__PURE__*/_jsx(EditAccountNameForm,{user_id:userId,account_id:account.id,currentName:account.account_name,onEdit:handleEditAccountName}),/*#__PURE__*/_jsx(TransactionForm,{userId:userId,accountId:account.id,onTransactionAdded:()=>{// Set success message for transaction\nsetSuccessMessage(\"Transaction added successfully for account \".concat(account.id));// Clear success message after a few seconds\nsetTimeout(()=>{setSuccessMessage(null);},3000);}}),account.transactions&&account.transactions.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Transactions List\"}),account.transactions.map(transaction=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Amount: \",transaction.amount]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Description: \",transaction.description]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Date: \",transaction.transaction_date]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDeleteTransaction(account.id,transaction.id),disabled:loading,children:\"Delete Transaction\"})]},transaction.id))]})]},account.id))]})]});};export default UserAccountsPage;","map":{"version":3,"names":["React","useState","useEffect","Link","TransactionForm","EditAccountNameForm","DeleteAccount","jsx","_jsx","jsxs","_jsxs","UserAccountsPage","_ref","userId","accounts","setAccounts","loading","setLoading","error","setError","successMessage","setSuccessMessage","fetchUserAccounts","response","fetch","concat","method","headers","ok","accountsData","json","console","log","status","errorMessage","text","handleEditAccountName","accountId","newAccountName","prevAccounts","map","account","id","account_name","setTimeout","handleDeleteTransaction","transactionId","handleDeleteAccount","className","children","to","style","color","length","name","balance","created_date","onDeleteSuccess","deletedAccountId","user_id","account_id","currentName","onEdit","onTransactionAdded","transactions","transaction","amount","description","transaction_date","onClick","disabled"],"sources":["/home/max/personal-projects/vaulted_wealth_frontend/src/components/UserAccountsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport TransactionForm from './TransactionForm';\nimport EditAccountNameForm from './EditAccountNameForm';\nimport DeleteAccount from './DeleteAccount';\nimport'./UserAccountsPage.css'\n\n\nconst UserAccountsPage = ({ userId }) => {\n  const [accounts, setAccounts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      try {\n        setLoading(true);\n\n        // Fetch user accounts data from the backend\n        const response = await fetch(`/user/${userId}/accounts`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        if (response.ok) {\n          const accountsData = await response.json();\n          console.log('User accounts data:', accountsData);\n\n          // Update the accounts state\n          setAccounts(accountsData.accounts);\n        } else {\n          console.error('Error fetching user accounts. Status:', response.status);\n          const errorMessage = await response.text();\n          console.error('Error message:', errorMessage);\n          setError(`Error fetching user accounts: ${errorMessage}`);\n        }\n      } catch (error) {\n        console.error('Error fetching user accounts:', error);\n        setError('Something went wrong. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserAccounts();\n  }, [userId]);\n\n  // Function to handle the edit of an account name\n  const handleEditAccountName = (accountId, newAccountName) => {\n    // Update the accounts state with the new account name\n    setAccounts((prevAccounts) =>\n      prevAccounts.map((account) =>\n        account.id === accountId ? { ...account, account_name: newAccountName } : account\n      )\n    );\n\n    // Set success message\n    setSuccessMessage(`Account name updated successfully for account ${accountId}`);\n\n    // Clear success message after a few seconds\n    setTimeout(() => {\n      setSuccessMessage(null);\n    }, 3000);\n  };\n\n  // Function to delete a transaction\n  const handleDeleteTransaction = (accountId, transactionId) => {\n    // Implement the logic to delete the transaction here\n    // Update the accounts state accordingly\n    console.log(`Deleting transaction ${transactionId} for account ${accountId}`);\n  };\n\n  // Function to delete an account\n  const handleDeleteAccount = (accountId) => {\n    // Implement the logic to delete the account here\n    // Update the accounts state accordingly\n    console.log(`Deleting account ${accountId}`);\n\n    // Set success message for account deletion\n    setSuccessMessage(`Account deleted successfully`);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>User Accounts</h1>\n      <Link to={`/user/${userId}/create-account`}>\n        <button>Create a New Account</button>\n      </Link>\n      {loading && <p>Loading user accounts...</p>}\n      {error && <p>{error}</p>}\n      {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}\n      {accounts.length > 0 && (\n        <div>\n          <h2>Accounts List</h2>\n          {accounts.map((account) => (\n            <div key={account.id}>\n              <h3>Account Name: {account.name}</h3>\n              <h2>Balance: {account.balance}</h2>\n              <h3>Created Date: {account.created_date}</h3>\n              <DeleteAccount\n                accountId={account.id}\n                onDeleteSuccess={(deletedAccountId) => {\n                console.log('Account deleted successfully:', deletedAccountId);\n    \n                }}\n              />\n              <EditAccountNameForm\n                user_id={userId}\n                account_id={account.id}\n                currentName={account.account_name}\n                onEdit={handleEditAccountName}\n              />\n              {/* Render the EditAccountNameForm for each account */}\n              <TransactionForm\n                userId={userId}\n                accountId={account.id}\n                onTransactionAdded={() => {\n                  // Set success message for transaction\n                  setSuccessMessage(`Transaction added successfully for account ${account.id}`);\n\n                  // Clear success message after a few seconds\n                  setTimeout(() => {\n                    setSuccessMessage(null);\n                  }, 3000);\n                }}\n              />\n              {/* Display all transactions for the account */}\n              {account.transactions && account.transactions.length > 0 && (\n                <div>\n                  <h3>Transactions List</h3>\n                  {account.transactions.map((transaction) => (\n                    <div key={transaction.id}>\n                      <h3>Amount: {transaction.amount}</h3>\n                      <h3>Description: {transaction.description}</h3>\n                      <h3>Date: {transaction.transaction_date}</h3>\n                      <button\n                        onClick={() => handleDeleteTransaction(account.id, transaction.id)}\n                        disabled={loading}\n                      >\n                        Delete Transaction\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserAccountsPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}