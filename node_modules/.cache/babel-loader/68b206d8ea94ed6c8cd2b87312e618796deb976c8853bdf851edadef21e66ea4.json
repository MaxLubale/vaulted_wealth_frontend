{"ast":null,"code":"var _jsxFileName = \"/home/max/personal-projects/Vaulted_Wealth/client/src/components/TransactionForm.js\",\n  _s = $RefreshSig$();\n// TransactionForm.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionForm = ({\n  accountId,\n  onTransactionAdded\n}) => {\n  _s();\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Check if amount and description are not empty\n    if (!amount.trim() || !description.trim()) {\n      setError('Please enter both amount and description.');\n      return;\n    }\n\n    // Prepare transaction data\n    const transactionData = {\n      amount: parseFloat(amount),\n      description: description,\n      account_id: accountId\n      // No need to include user_id in the data since it's already part of the route\n      // Add other fields as needed\n    };\n    try {\n      // Send transaction data to the Flask backend\n      const response = await fetch(`/${accountId}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(transactionData)\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Transaction added successfully:', data);\n\n      // Notify the parent component that a new transaction has been added\n      onTransactionAdded();\n\n      // Clear form fields and error\n      setAmount('');\n      setDescription('');\n      setError(null);\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      setError('Failed to add transaction. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Transaction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        children: \"Amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"amount\",\n        name: \"amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: \"Description:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"description\",\n        name: \"description\",\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionForm, \"XLYeuk4eg3PVkIapCuEEKTzIEE0=\");\n_c = TransactionForm;\nexport default TransactionForm;\nvar _c;\n$RefreshReg$(_c, \"TransactionForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TransactionForm","accountId","onTransactionAdded","_s","amount","setAmount","description","setDescription","error","setError","handleSubmit","e","preventDefault","trim","transactionData","parseFloat","account_id","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","statusText","data","json","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/max/personal-projects/Vaulted_Wealth/client/src/components/TransactionForm.js"],"sourcesContent":["// TransactionForm.js\nimport React, { useState } from 'react';\n\nconst TransactionForm = ({ accountId, onTransactionAdded }) => {\n  const [amount, setAmount] = useState('');\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState(null);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Check if amount and description are not empty\n    if (!amount.trim() || !description.trim()) {\n      setError('Please enter both amount and description.');\n      return;\n    }\n\n    // Prepare transaction data\n    const transactionData = {\n      amount: parseFloat(amount),\n      description: description,\n      account_id: accountId,\n      // No need to include user_id in the data since it's already part of the route\n      // Add other fields as needed\n    };\n\n    try {\n      // Send transaction data to the Flask backend\n      const response = await fetch(`/${accountId}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(transactionData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('Transaction added successfully:', data);\n\n      // Notify the parent component that a new transaction has been added\n      onTransactionAdded();\n\n      // Clear form fields and error\n      setAmount('');\n      setDescription('');\n      setError(null);\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      setError('Failed to add transaction. Please try again.');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Add Transaction</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"amount\">Amount:</label>\n        <input\n          type=\"number\"\n          id=\"amount\"\n          name=\"amount\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          required\n        />\n\n        <label htmlFor=\"description\">Description:</label>\n        <input\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          required\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n\n      {error && <p>{error}</p>}\n    </div>\n  );\n};\n\nexport default TransactionForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}