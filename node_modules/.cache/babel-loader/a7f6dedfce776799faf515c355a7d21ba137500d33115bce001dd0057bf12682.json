{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nconst AdminDashboard = () => {\n  _s();\n  const [usersData, setUsersData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchUsersData = async () => {\n      try {\n        const response = await fetch('/users');\n        if (response.ok) {\n          const data = await response.json();\n\n          // Check if the data is an array before updating the state\n          if (Array.isArray(data)) {\n            setUsersData(data);\n          } else {\n            setError('Invalid data format received.');\n          }\n        } else {\n          setError('Failed to fetch users data.');\n        }\n      } catch (error) {\n        setError('Error fetching users data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUsersData();\n  }, []);\n};\n_s(AdminDashboard, \"dlHPYVFpwiqMaECmbkHazUKbAPE=\");\n_c = AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useEffect","useState","AdminDashboard","_s","usersData","setUsersData","loading","setLoading","error","setError","fetchUsersData","response","fetch","ok","data","json","Array","isArray","_c","$RefreshReg$"],"sources":["/home/max/personal-projects/Vaulted_Wealth/client/src/components/AdminDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst AdminDashboard = () => {\n  const [usersData, setUsersData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchUsersData = async () => {\n      try {\n        const response = await fetch('/users');\n  \n        if (response.ok) {\n          const data = await response.json();\n  \n          // Check if the data is an array before updating the state\n          if (Array.isArray(data)) {\n            setUsersData(data);\n          } else {\n            setError('Invalid data format received.');\n          }\n        } else {\n          setError('Failed to fetch users data.');\n        }\n      } catch (error) {\n        setError('Error fetching users data.');\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchUsersData();\n  }, []);\n}  "],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMU,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,QAAQ,CAAC;QAEtC,IAAID,QAAQ,CAACE,EAAE,EAAE;UACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;;UAElC;UACA,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;YACvBT,YAAY,CAACS,IAAI,CAAC;UACpB,CAAC,MAAM;YACLL,QAAQ,CAAC,+BAA+B,CAAC;UAC3C;QACF,CAAC,MAAM;UACLA,QAAQ,CAAC,6BAA6B,CAAC;QACzC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdC,QAAQ,CAAC,4BAA4B,CAAC;MACxC,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;AACR,CAAC;AAAAP,EAAA,CA/BKD,cAAc;AAAAgB,EAAA,GAAdhB,cAAc;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}